name: Complete DevSecOps CI/CD pipeline

on: 
  push:
    branches:
      - "master"

jobs:
  sast-scan:
    runs-on: ubuntu-latest
    name: Run SonarQube with Maven
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven and analyze with SonarQube
        run:  mvn -B verify sonar:sonar -Dsonar.projectKey=snyksonardemo -Dsonar.organization=snyksonardemo -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=$SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  sca-scan:
    needs: sast-scan
    runs-on: ubuntu-latest
    name: Maven using Snyk security scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true 
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}

  zap_scan:
    needs: sca-scan
    runs-on: ubuntu-latest
    name: Scan the webapplication
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Build Image
        run: docker build -t owasp-zap-poc .
      - name: Run Docker Container
        run: docker run -d -p 8080:8080 owasp-zap-poc
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        continue-on-error: true 
        with:
          target: 'http://localhost:8080'

  Build-image-publish-to-ecr:
    needs: zap_scan
    runs-on: ubuntu-latest
    name: Build Image Publish to ECR
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Updated to use a more recent version

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: devsecops
          IMAGE_TAG: 1.0.0
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker build -t owasp-zap-poc .
          docker tag owasp-zap-poc $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
             

      - name: Login to GitHub Packages
        uses: docker/login-action@v1  # Updated to use Docker's official login-action
        with:
          registry: docker.pkg.github.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
